name: Docker Image CI 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  ci:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        context: [app, database, payment_gateway, reverse_proxy]
        
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
    - name: Build and Push the images
      uses: docker/build-push-action@v2
      with: 
        context: ./${{ matrix.context }}
        push: true
        tags: ${{secrets.DOCKER_USERNAME}}/${{ matrix.context }}:latest, ${{secrets.DOCKER_USERNAME}}/${{ matrix.context }}:${{ github.sha }} 
  
  cd:
  
    needs: ci
    
    name: Upload to AWS EC2
  
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-2

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Check if the instance is running
      run: |
        aws ec2 describe-instance-status --instance-ids ${{ secrets.INSTANCE_ID }} --query 'InstanceStatuses[0].InstanceState.Name' > aws_output.out
        OUT=`cat aws_output.out | grep -w running | wc -l`;
        if [ $OUT -eq 0 ]; then aws ec2 start-instances --instance-ids  ${{ secrets.INSTANCE_ID }}; fi
        
    - name: copy file via ssh key
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.INSTANCE_PUBLIC_DNS }}
        username: ${{ secrets.INSTANCE_USERNAME }}
        key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
        source: "./docker-compose.yml"
        target: "/home/${{ secrets.INSTANCE_USERNAME }}"
    
    - name: Executing remote ssh commands using key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.INSTANCE_PUBLIC_DNS }}
        username: ${{ secrets.INSTANCE_USERNAME }}
        key: ${{ secrets.INSTANCE_PRIVATE_KEY }}
        timeout: 60s
        script: | 
          docker swarm init
          if ! [[ -d "./devsecrets" ]]; then mkdir devsecrets; fi
          if ! [[ -d "./certs" ]]; then mkdir certs; fi
          echo ${{ secrets.POSTGRES_PASSWORD }} > devsecrets/postgres_password
          echo ${{ secrets.PAYMENT_TOKEN }} > devsecrets/payment_token
          echo "${{ secrets.REVPROX_CERT }}" > certs/domain.crt
          echo "${{ secrets.REVPROX_KEY }}" > certs/domain.key
          docker stack deploy --compose-file docker-compose.yml atsea

    - name: Trigger end to end tests
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repository: sesp13/atsea-testing
        event-type: deployed

          